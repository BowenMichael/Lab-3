#define FLT_MAX 3.402823466e+38

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

vec4 rayAt(in vec4 rayDirection, in vec4 rayOrigin ,float t){
	return rayOrigin + (t*rayDirection);
}

vec4 setFaceNormal(in vec4 rayDirection, in vec4 outwardNormal){
	return dot(rayDirection, outwardNormal) < 0.0 ? outwardNormal : -outwardNormal;
}

    

bool hitCircle(in vec4 rayDirection, in vec4 rayOrigin, in vec4 obj, out float timeOfHit, out vec4 rayAtTime, out vec4 outwardNormal){
	vec4 oc = vec4((rayOrigin.xyz - obj.xyz), 0.0);
    float a = dot(rayDirection, rayDirection);
    float halfB = dot(oc, rayDirection);
    float c =  dot(oc, oc) - obj.w * obj.w;
    float d = halfB * halfB - a*c;
    if(d > 0.0){ //d < 0.0 is where the circles intersect
        float root = sqrt(d);
        float tMax = FLT_MAX;
        float tMin = 1.0;
        timeOfHit = (-halfB - root)/a;
        timeOfHit = (timeOfHit < tMax && timeOfHit > tMin) ? timeOfHit : (-halfB + root)/a;
        //if(timeOfHit < tMax && timeOfHit > tMin){
        rayAtTime = rayAt(rayDirection, rayOrigin, timeOfHit);
        vec4 normal = (rayAtTime - obj) / obj.w;
        outwardNormal = setFaceNormal(rayDirection, normal);
        return true;
        
    
    }
    return false;
}


// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcCircleColor(in vec4 rayDirection, in vec4 rayOrigin, in vec4 object, in vec4 normal)
{   
    return vec4(1.0); 
    //return .5 *( normal + vec4(1.0));
    //return normal;
}
   
vec4 calcBackround(in vec4 rayDirection){
    vec4 unitDirection = rayDirection / length(rayDirection);
    float t = 0.5 * (unitDirection.y + 1.0);
    return (1.0 - t) * vec4(1.0) + (t*1.0) * vec4(0.5f, 0.7f, 1.0f, 0.0);
}

vec4 writeColor(in vec4 pixelColor, in int samplesPerPixel){
    float r = pixelColor.x;
    float g = pixelColor.y;
    float b = pixelColor.z;

  // Divide the color by the number of samples.
    float scale = 1.0 / float(samplesPerPixel);
    r *= scale;
    g *= scale;
    b *= scale;

    // Write the translated [0,255] value of each color component.
    return vec4(clamp(r, 0.0, 1.0), clamp(g, 0.0, 1.0), clamp(b, 0.0, 1.0), 1.0);
}

vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in vec4 obj, inout bool hit)
{
        
    //Calculating the ray at a specific time
    float discriminate, time;
    
    //normal vector of an object
    vec4 normal;
    vec4 rayAtTime;
    
    //hit flag for indivivual pixel

	if(hitCircle(rayDirection, rayOrigin, obj, time, rayAtTime, normal)){
     		return calcCircleColor(rayDirection, rayOrigin, obj, normal);
            hit = true;

    }
    if (!hit){
      	return calcBackround(rayDirection);
    }
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    const int MAX_OBJECTS = 5;
    const int SAMPLES_PER_PIXEL = 100;
    float oc;

    
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    //Circle Creation
    vec4 objects[MAX_OBJECTS];
    objects[0] = vec4(vec3((viewport.x/2.0) + cos(iTime), (viewport.y/2.0) + sin(iTime), 1.0 +iTime/2.0 ), .5);
    objects[1] = vec4(vec3(cos(iTime*iTime), 100.5, 41.0), 100.0);
    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
 
    
	vec4 pixelColor = vec4(0.0);
    bool hit;
    // color
    for(int i = MAX_OBJECTS - 1 ; i >=0; --i){
        //fragColor = calcColor(rayDirection, rayOrigin, objects[i], hit);
        //pixelColor += fragColor;
        for(int j = SAMPLES_PER_PIXEL - 1; j >=0; --j){
            float u = (fragCoord.x + rand(fragCoord)) / (viewport.x - 1.0); //the x poisition on the screen converted to be between 0 and 1
			float v = (fragCoord.y + rand(fragCoord)) / (viewport.y - 1.0); //the y poisition on the screen converted to be between 0 and 1
				
            rayDirection = vec4(uv, focalLength, 1.0) + u * viewport.x + v * viewport.y - rayOrigin; 
            //rayDirection.y += (fragCoord.y + rand(fragCoord)) / (viewport.y-1.0); 
        	pixelColor += calcColor(rayDirection, rayOrigin, objects[i], hit);
        }
    }
     
      	//pixelColor += calcBackround(rayDirection);
        //fragColor = calcBackround(rayDirection);

   fragColor = writeColor(pixelColor, SAMPLES_PER_PIXEL);

    //TEST COLOR:
    // -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}
